{"version":3,"sources":["Components/Header/Header.jsx","Components/Meme/Meme.jsx","Components/Regular/Regular.jsx","Components/Hot/Hot.jsx","Components/ErrorPage/ErrorPage.jsx","Components/Reader/Reader.jsx","Components/Nav/Nav.jsx","App.jsx","serviceWorker.js","Reducers/rootReducer.js","index.jsx"],"names":["Header","className","Meme","props","title","src","img","alt","onClick","upvote","id","upvotes","downvote","downvotes","Regular","memes","filter","meme","map","key","uuid","Hot","ErrorPage","Reader","findClickedMeme","clickedMemeId","clickedMeme","memesList","findIndex","index","console","log","axios","get","then","data","JSON","parse","atob","content","updateMemeList","path","render","memeList","exact","component","Component","connect","state","dispatch","type","value","clickedMemeIndex","Nav","useState","hot","regular","active","changeActive","clickHandler","e","target","innerText","to","App","React","example","num","visible","visibility","examp","Boolean","window","location","hostname","match","initialState","store","createStore","action","newMemeList","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9d81753f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.scss';\r\n\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\" Header row justify-content-between bg-dark align-items-center\">\r\n      <div className=\"Header_brand col-6 h-75 mb-3 ml-3\"></div>\r\n      <div className=\"btn-group col-2 h-25  \">\r\n        <button className=\"btn btn-outline-light\">Log In</button>\r\n        <button className=\"btn btn-outline-light\">Sign In</button>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./Meme.scss\";\r\n\r\nfunction Meme(props) {\r\n  return (\r\n    <div className=\"Meme mt-2\">\r\n        <div className=\"card justify-content-center\">\r\n        <div className=\"card-header text-center\">{props.title}</div>\r\n        <div className=\"card-image-top  text-center\">\r\n          <img className='h-100' src={props.img} alt=\"Meme img\" />\r\n        </div>\r\n        <div className=\"card-body\"></div>\r\n        <div className=\"card-footer\">\r\n          <button\r\n            className=\"btn btn-primary mr-3\"\r\n            onClick={() => props.upvote(props.id)}\r\n          >\r\n            Upvote <span className=\"badge border\">{props.upvotes}</span>\r\n          </button>\r\n          <button\r\n            className=\"btn btn-danger\"\r\n            onClick={() => props.downvote(props.id)}\r\n          >\r\n            Downvote <span className=\"badge border\">{props.downvotes}</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Meme;\r\n","import React from \"react\";\r\n\r\nimport Meme from \"../Meme/Meme\";\r\nimport uuid from \"uuid/dist/v4\";\r\n\r\nfunction Regular(props) {\r\n  return (\r\n    <div className=\"Regular d-flex flex-column align-items-center\">\r\n      {props.memes.filter((meme) => !(meme.upvotes - meme.downvotes > 5)).map((meme) => {\r\n        return (\r\n          <Meme\r\n            key={uuid()}\r\n            downvotes={meme.downvotes}\r\n            upvotes={meme.upvotes}\r\n            upvote={props.upvote}\r\n            downvote={props.downvote}\r\n            img={meme.img}\r\n            title={meme.title}\r\n            id={meme.id}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Regular;\r\n","import React from \"react\";\r\nimport Meme from \"../Meme/Meme\";\r\nimport uuid from \"uuid/dist/v4\";\r\n\r\nfunction Hot(props) {\r\n  return (\r\n    <div className=\"Regular d-flex flex-column align-items-center\">\r\n      {props.memes.filter((meme) => meme.upvotes - meme.downvotes > 5).map((meme) => {\r\n        return (\r\n          <Meme\r\n            key={uuid()}\r\n            downvotes={meme.downvotes}\r\n            upvotes={meme.upvotes}\r\n            upvote={props.upvote}\r\n            downvote={props.downvote}\r\n            img={meme.img}\r\n            title={meme.title}\r\n            id={meme.id}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Hot;\r\n","import React from \"react\";\r\n\r\nexport default function ErrorPage() {\r\n  return <div>Error 404, page not found</div>;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport \"./Reader.scss\";\r\nimport Regular from \"../Regular/Regular\";\r\nimport Hot from \"../Hot/Hot\";\r\nimport ErrorPage from \"../ErrorPage/ErrorPage\";\r\n\r\nclass Reader extends Component {\r\n  findClickedMeme = (clickedMemeId) => {\r\n    const clickedMeme = this.memesList.memes.filter((meme) => {\r\n      return meme.id === clickedMemeId;\r\n    });\r\n    const index = this.memesList.memes.findIndex(\r\n      (meme) => meme.id === clickedMeme[0].id\r\n    );\r\n    return index;\r\n  };\r\n  upvote = (clickedMemeId) => {\r\n    const index = this.findClickedMeme(clickedMemeId);\r\n    this.props.upvote(index);\r\n    console.log(this.props);\r\n  };\r\n  downvote = (clickedMemeId) => {\r\n    const index = this.findClickedMeme(clickedMemeId);\r\n    this.props.downvote(index);\r\n  };\r\n  componentDidMount() {\r\n    axios\r\n      .get(\r\n        \"https://api.github.com/repos/adamciecko1992/Meme_Browser/contents/src/data/memes.json\"\r\n      )\r\n      .then((data) => {\r\n        this.memesList = JSON.parse(atob(data.data.content));\r\n        this.props.updateMemeList(this.memesList.memes);\r\n      });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"Reader bg-secondary col-10\">\r\n        <Switch>\r\n          <Route\r\n            path=\"/hot\"\r\n            render={() => (\r\n              <Hot\r\n                upvote={this.upvote}\r\n                downvote={this.downvote}\r\n                memes={this.props.memeList}\r\n              />\r\n            )}\r\n          ></Route>\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            render={() => (\r\n              <Regular\r\n                memes={this.props.memeList}\r\n                upvote={this.upvote}\r\n                downvote={this.downvote}\r\n              />\r\n            )}\r\n          ></Route>\r\n          <Route component={ErrorPage} />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToPorps = (state) => {\r\n  return { memeList: state.memeList };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    updateMemeList: (memeList) => {\r\n      dispatch({ type: \"UPDATE_LIST\", value: memeList });\r\n\r\n    },\r\n    upvote: (clickedMemeIndex) => {\r\n      dispatch({ type: \"UPVOTE\", value: clickedMemeIndex });\r\n\r\n    },\r\n    downvote: (clickedMemeIndex) => {\r\n      dispatch({ type: \"DOWNVOTE\", value: clickedMemeIndex });\r\n    },\r\n  };\r\n};\r\nexport default connect(mapStateToPorps, mapDispatchToProps)(Reader);\r\n","import React, { useState} from \"react\";\r\nimport \"./Nav.scss\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nfunction Nav() {\r\n  const [active, changeActive] = useState({ hot: '', regular:'active' });\r\n  const clickHandler = (e) => {\r\n    if (e.target.innerText === \"Regular\") {\r\n      changeActive({ hot: '', regular: \"active\" })\r\n    } else if (e.target.innerText === \"Hot\") {\r\n      changeActive({ hot: 'active', regular: \"\" })\r\n    }\r\n  }\r\n  return (\r\n    \r\n    <div className=\"Nav col-2 bg-white pt-3\">\r\n      <ul className=\"list-group-flush text-center\">\r\n        <li  className={`list_button list-group-item bg-primary ${active.hot}`}>\r\n          <NavLink onClick={clickHandler} className=\"text-white text-decoration-none\" to={\"/\"}>\r\n            Regular\r\n          </NavLink>\r\n        </li>\r\n        <li  className={`list_button list-group-item px-0 bg-secondary ${active.regular}`}>\r\n          <NavLink\r\n            onClick={clickHandler}\r\n            className=\"text-white text-decoration-none\"\r\n            exact\r\n            to={\"/hot\"}\r\n          >\r\n            Hot\r\n          </NavLink>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport Header from \"./Components/Header/Header\";\r\nimport Reader from \"./Components/Reader/Reader\";\r\nimport Nav from \"./Components/Nav/Nav\";\r\nimport \"./App.scss\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App container-fluid pt-2 px-4\">\r\n        <Header />\r\n        <div className=\"row\">\r\n          <Nav />\r\n          <Reader />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { example: state.example, num: state.num, visible: state.visibility };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    examp: () => {\r\n      dispatch({ type: \"INCREMENT\", value: 1 });\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const initialState = {\r\n  memeList: []\r\n};\r\n\r\nexport const rootReducer = (state = initialState, action) => {\r\n  if (action.type === \"UPDATE_LIST\") {\r\n\r\n    return { ...state, memeList: action.value };\r\n  }\r\n  if (action.type === \"UPVOTE\") {\r\n    const newMemeList = [...state.memeList];\r\n    newMemeList[action.value].upvotes += 1;\r\n\r\n    return { ...state, memeList: newMemeList };\r\n  }\r\n  if (action.type === \"DOWNVOTE\") {\r\n    const newMemeList = [...state.memeList];\r\n    newMemeList[action.value].downvotes += 1;\r\n    return { ...state, memeList: newMemeList };\r\n  }\r\n  return state;\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport { rootReducer } from './Reducers/rootReducer';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <HashRouter>\r\n        <App />\r\n      </HashRouter>{' '}\r\n    </Provider>{' '}\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}