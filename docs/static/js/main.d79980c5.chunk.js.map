{"version":3,"sources":["Components/Header/Header.jsx","Components/Meme/Meme.jsx","Components/Regular/Regular.jsx","Components/Hot/Hot.jsx","Components/ErrorPage/ErrorPage.jsx","Components/Reader/Reader.jsx","Components/Nav/Nav.jsx","App.jsx","serviceWorker.js","Reducers/rootReducer.js","index.js"],"names":["Header","className","Meme","props","title","src","img","alt","onClick","upvote","id","upvotes","downvote","downvotes","Regular","memes","filter","meme","map","key","uuid","Hot","ErrorPage","Reader","findClickedMeme","clickedMemeId","clickedMeme","memesList","findIndex","index","console","log","axios","get","then","data","JSON","parse","atob","content","updateMemeList","path","render","memeList","exact","component","Component","connect","state","dispatch","type","value","clickedMemeIndex","Nav","to","App","React","example","num","visible","visibility","examp","Boolean","window","location","hostname","match","initialState","store","createStore","action","newMemeList","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d79980c5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.scss\";\n\nfunction Header() {\n  return (\n    <header className=\" Header row justify-content-between bg-dark align-items-center\">\n      <div className=\"Header_brand col-6 h-75 mb-3 ml-3\"></div>\n      <div className=\"btn-group col-2 h-25  \">\n        <button className=\"btn btn-outline-light\">Log In</button>\n        <button className=\"btn btn-outline-light\">Sign In</button>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./Meme.scss\";\n\nfunction Meme(props) {\n  return (\n    <div className=\"Meme\">\n      <h3>{props.title}</h3>\n      <div className=\"card\">\n        <div className=\"card-header\">{props.title}</div>\n        <div className=\"card-image-top\">\n          <img src={props.img} alt=\"Meme img\" />\n        </div>\n        <div className=\"card-body\"></div>\n        <div className=\"card-footer\">\n          <button\n            className=\"btn btn-primary mr-3\"\n            onClick={() => props.upvote(props.id)}\n          >\n            Upvote <span className=\"badge border\">{props.upvotes}</span>\n          </button>\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => props.downvote(props.id)}\n          >\n            Downvote <span className=\"badge border\">{props.downvotes}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Meme;\n","import React from \"react\";\n\nimport Meme from \"../Meme/Meme\";\nimport uuid from \"uuid/dist/v4\";\n\nfunction Regular(props) {\n  return (\n    <div className=\"Regular d-flex flex-column align-items-center\">\n      {props.memes.filter((meme) => !(meme.upvotes - meme.downvotes > 5)).map((meme) => {\n        return (\n          <Meme\n            key={uuid()}\n            downvotes={meme.downvotes}\n            upvotes={meme.upvotes}\n            upvote={props.upvote}\n            downvote={props.downvote}\n            img={meme.img}\n            title=\"\"\n            id={meme.id}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Regular;\n","import React from \"react\";\nimport Meme from \"../Meme/Meme\";\nimport uuid from \"uuid/dist/v4\";\n\nfunction Hot(props) {\n  return (\n    <div className=\"Regular d-flex flex-column align-items-center\">\n      {props.memes.filter((meme) => meme.upvotes - meme.downvotes > 5).map((meme) => {\n        return (\n          <Meme\n            key={uuid()}\n            downvotes={meme.downvotes}\n            upvotes={meme.upvotes}\n            upvote={props.upvote}\n            downvote={props.downvote}\n            img={meme.img}\n            title=\"\"\n            id={meme.id}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Hot;\n","import React from \"react\";\n\nexport default function ErrorPage() {\n  return <div>Error 404, page not found</div>;\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Switch, Route } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"./Reader.scss\";\nimport Regular from \"../Regular/Regular\";\nimport Hot from \"../Hot/Hot\";\nimport ErrorPage from \"../ErrorPage/ErrorPage\";\n\nclass Reader extends Component {\n  findClickedMeme = (clickedMemeId) => {\n    const clickedMeme = this.memesList.memes.filter((meme) => {\n      return meme.id === clickedMemeId;\n    });\n    const index = this.memesList.memes.findIndex(\n      (meme) => meme.id === clickedMeme[0].id\n    );\n    return index;\n  };\n  upvote = (clickedMemeId) => {\n    const index = this.findClickedMeme(clickedMemeId);\n    this.props.upvote(index);\n    console.log(this.props);\n  };\n  downvote = (clickedMemeId) => {\n    const index = this.findClickedMeme(clickedMemeId);\n    this.props.downvote(index);\n  };\n  componentDidMount() {\n    axios\n      .get(\n        \"https://api.github.com/repos/adamciecko1992/Meme_Browser/contents/src/data/memes.json\"\n      )\n      .then((data) => {\n        this.memesList = JSON.parse(atob(data.data.content));\n        this.props.updateMemeList(this.memesList.memes);\n      });\n  }\n  render() {\n    return (\n      <div className=\"Reader bg-secondary col-10\">\n        <Switch>\n          <Route\n            path=\"/hot\"\n            render={() => (\n              <Hot\n                upvote={this.upvote}\n                downvote={this.downvote}\n                memes={this.props.memeList}\n              />\n            )}\n          ></Route>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <Regular\n                memes={this.props.memeList}\n                upvote={this.upvote}\n                downvote={this.downvote}\n              />\n            )}\n          ></Route>\n          <Route component={ErrorPage} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nconst mapStateToPorps = (state) => {\n  return { memeList: state.memeList };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    updateMemeList: (memeList) => {\n      dispatch({ type: \"UPDATE_LIST\", value: memeList });\n\n    },\n    upvote: (clickedMemeIndex) => {\n      dispatch({ type: \"UPVOTE\", value: clickedMemeIndex });\n\n    },\n    downvote: (clickedMemeIndex) => {\n      dispatch({ type: \"DOWNVOTE\", value: clickedMemeIndex });\n    },\n  };\n};\nexport default connect(mapStateToPorps, mapDispatchToProps)(Reader);\n","import React from \"react\";\nimport \"./Nav.scss\";\nimport { NavLink } from \"react-router-dom\";\n\nfunction Nav() {\n  return (\n    <div className=\"Nav col-2 bg-white pt-3\">\n      <ul className=\"list-group-flush text-center\">\n        <li className=\"list-group-item bg-primary bg-danger\">\n          <NavLink className=\"text-white text-decoration-none\" to={\"/\"}>\n            Regular\n          </NavLink>\n        </li>\n        <li className=\"list-group-item px-0 bg-secondary\">\n          <NavLink\n            className=\"text-white text-decoration-none\"\n            exact\n            to={\"/hot\"}\n          >\n            Hot\n          </NavLink>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport Header from \"./Components/Header/Header\";\nimport Reader from \"./Components/Reader/Reader\";\nimport Nav from \"./Components/Nav/Nav\";\nimport \"./App.scss\";\nimport { connect } from \"react-redux\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App container-fluid pt-2 px-4\">\n        <Header />\n        <div className=\"row\">\n          <Nav />\n          <Reader />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { example: state.example, num: state.num, visible: state.visibility };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    examp: () => {\n      dispatch({ type: \"INCREMENT\", value: 1 });\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n  memeList: []\n};\n\nexport const rootReducer = (state = initialState, action) => {\n  if (action.type === \"UPDATE_LIST\") {\n\n    return { ...state, memeList: action.value };\n  }\n  if (action.type === \"UPVOTE\") {\n    const newMemeList = [...state.memeList];\n    newMemeList[action.value].upvotes += 1;\n\n    return { ...state, memeList: newMemeList };\n  }\n  if (action.type === \"DOWNVOTE\") {\n    const newMemeList = [...state.memeList];\n    newMemeList[action.value].downvotes += 1;\n    return { ...state, memeList: newMemeList };\n  }\n  return state;\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { rootReducer } from \"./Reducers/rootReducer\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}